pipeline {
    agent any

    environment {
        PATH = "${HOME}/.local/bin:${PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Análisis de Vulnerabilidades (Checkov)') {
            steps {
                sh '''
                    if ! command -v checkov >/dev/null 2>&1; then
                        pip install --user checkov
                    fi
                    checkov -d infra/ --output cli | tee checkov_report.txt
                '''
            }
        }
        stage('Empaquetar Lambdas') {
            steps {
                powershell 'backend\\build_all_lambdas.ps1'
            }
        }
        stage('Pruebas unitarias (pytest)') {
            steps {
                sh '''
                    pip install --user pytest
                    pytest backend/tests | tee pytest_report.txt
                '''
            }
        }
        stage('Terraform Plan & Apply') {
            steps {
                dir('infra') {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        sh '''
                            terraform init
                            terraform plan -out=tfplan
                            terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
        stage('Obtener outputs de Terraform') {
            steps {
                script {
                    env.FRONTEND_BUCKET = sh(
                        script: "cd infra && terraform output -raw frontend_bucket_name",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        stage('Build Frontend (React)') {
            steps {
                dir('frontend/dashboard-iot') {
                    sh '''
                        npm install
                        npm run build
                    '''
                }
            }
        }
        stage('Upload Frontend to S3') {
            steps {
                sh '''
                    aws s3 sync frontend/dashboard-iot/build s3://$FRONTEND_BUCKET --delete
                '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'checkov_report.txt', allowEmptyArchive: true
            archiveArtifacts artifacts: 'pytest_report.txt', allowEmptyArchive: true
        }
        // Bloque failure eliminado porque estaba vacío
    }
}
