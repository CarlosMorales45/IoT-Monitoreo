pipeline {
    agent any

    environment {
        PATH = "${HOME}/.local/bin;${PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Análisis de Vulnerabilidades (Checkov)') {
            steps {
                bat '''
                    pip install --user checkov
                    set PATH=%PATH%;C:\\Windows\\system32\\config\\systemprofile\\AppData\\Roaming\\Python\\Python313\\Scripts
                    checkov -d infra/ --output cli > checkov_report.txt || exit 0
                    type checkov_report.txt
                '''
            }
        }
        stage('Empaquetar Lambdas') {
            steps {
                powershell 'backend\\build_all_lambdas.ps1'
            }
        }
        stage('Pruebas unitarias (pytest)') {
            steps {
                bat '''
                    pip install --user pytest
                    set PATH=%PATH%;C:\\Windows\\system32\\config\\systemprofile\\AppData\\Roaming\\Python\\Python313\\Scripts
                    pytest backend/tests > pytest_report.txt || exit 0
                    type pytest_report.txt
                '''
            }
        }
        stage('Terraform Plan & Apply') {
            steps {
                dir('infra') {
                    withCredentials([
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        bat '''
                            terraform init
                            terraform plan -out=tfplan
                            terraform apply -auto-approve tfplan
                        '''
                    }
                }
            }
        }
        stage('Obtener outputs de Terraform') {
            steps {
                script {
                    def output = bat(
                        script: 'cd infra && terraform output -raw frontend_bucket_name',
                        returnStdout: true
                    )
                    // Filtra solo la última línea no vacía (el bucket limpio)
                    def bucketLines = output.readLines().findAll { it.trim() }
                    env.FRONTEND_BUCKET = bucketLines[-1]
                    echo "Bucket S3 detectado: ${env.FRONTEND_BUCKET}"
                }
            }
        }
        stage('Build Frontend (React)') {
            steps {
                dir('frontend/dashboard-iot') {
                    bat '''
                        npm install
                        npm run build
                    '''
                }
            }
        }
        stage('Upload Frontend to S3') {
            steps {
                script {
                    echo "Subiendo a bucket: ${env.FRONTEND_BUCKET}"
                    bat """
                        aws s3 sync frontend/dashboard-iot/build s3://${env.FRONTEND_BUCKET} --delete
                    """
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'checkov_report.txt', allowEmptyArchive: true
            archiveArtifacts artifacts: 'pytest_report.txt', allowEmptyArchive: true
        }
    }
}